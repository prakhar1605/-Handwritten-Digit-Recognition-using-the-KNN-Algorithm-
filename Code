# Import necessary libraries
import numpy as np          # For handling data in arrays
import matplotlib.pyplot as plt  # For plotting graphs and images
from sklearn.datasets import fetch_openml  # For loading the dataset
from sklearn.model_selection import train_test_split  # To split data into training and testing
from sklearn.neighbors import KNeighborsClassifier  # For KNN algorithm
from sklearn.metrics import accuracy_score, classification_report  # For evaluating the model

# Load the MNIST dataset
print("Loading MNIST dataset...")
mnist = fetch_openml('mnist_784', version=1)  # This loads the MNIST data
X, y = mnist.data, mnist.target.astype(int)   # 'X' contains the image data and 'y' contains the labels (0-9)

# Normalize the data
X = X / 255.0  # Each pixel value will be between 0 and 1

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the KNN classifier
print("Training KNN model...")
knn = KNeighborsClassifier(n_neighbors=3)  # We are using 3 nearest neighbors for predictions
knn.fit(X_train, y_train)  # This trains the model with the training data

# Make predictions
y_pred = knn.predict(X_test)  # Predict the labels for the test data

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)  # Compare the predicted and actual values
print(f"Accuracy: {accuracy * 100:.2f}%")  # Print the accuracy
print("Classification Report:\n", classification_report(y_test, y_pred))  # Detailed performance report

# Display some test images with predictions
fig, axes = plt.subplots(3, 3, figsize=(8, 8))  # Create a grid of 3x3 images
axes = axes.ravel()  # Flatten the axes array for easy indexing
for i in range(9):
    axes[i].imshow(X_test.iloc[i].values.reshape(28, 28), cmap='gray')  # Display each image
    axes[i].set_title(f"Pred: {y_pred[i]}")  # Show the predicted label as the title
    axes[i].axis('off')  # Turn off axis labels
plt.show()  # Display the plot
